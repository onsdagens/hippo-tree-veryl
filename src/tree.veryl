module Tree::<InputWidth: const> (
    i_vals: input  logic<InputWidth> [8],
    o_val : output logic<InputWidth>    ,
    //   o_idx : output logic<4>    ,

) {
    function max (
        arr        : input logic<InputWidth> [8],
        range_start: input u32                  ,
        range_end  : input u32                  ,
    ) -> logic<4> {
        if (range_end - range_start) >= 2 {
            let middle: u32               = range_start + ((range_end - range_start) >> 1);
            let left  : logic<InputWidth> = max(arr, range_start, middle);
            let right : logic<InputWidth> = max(arr, middle + 1, range_end);
            if ((left >: right)) {
                return left;
            } else {
                return right;
            }
            return right;
        } else if (range_end - range_start == 1) {
            if (arr[range_start] >: arr[range_end]) {
                return arr[range_start];
            } else {
                return arr[range_end];
            }
        } else {
            return arr[range_start];
        }
    }
    assign o_val = max(i_vals, 0, $size(i_vals));
}
